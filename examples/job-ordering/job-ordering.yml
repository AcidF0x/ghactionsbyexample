# [병렬 Job](parallel-jobs.html)에서 설명 한 내용대로 `job`은 기본적으로 병렬 실행됩니다.
# `need` 키워드를 사용하여 강제로 실행 순서를 지정 할수있습니다.

name: parallel-jobs
on:
  push:

jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Doing work parallel with job2"
  job2:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Doing work parallel with job1"
  job3:
    runs-on: ubuntu-latest
    # job1'가 성공적으로 완료되어야 'job3'가 작동 합니다.
    needs: job1
    steps:
      - run: echo "job1 done, running job3"
  # `job2`,`job3`가 성공적으로 완료되어야 `job4`가 작동 합니다.
  job4:
    runs-on: ubuntu-latest
    needs: [job2, job3]
    steps:
      - run: echo "job2 & job3 done, running job4"
  job5:
    runs-on: ubuntu-latest
    # ::span-comment
    # 이 'job'은 `job1`이 실패 하더라도 `job1`이후에 실행 됩니다. ([Context 변수](context-variables.html)를 확인하세요)
    if: ${{ always() }}
    needs: job1
    # ::end-span
    steps:
      - run: echo "job2 & job3 done, running job4"
